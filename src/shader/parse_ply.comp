//All contributions from Meta and affiliates:
//Copyright (c) 2025- Meta Platforms, Inc. and affiliates            (Samuel Rota Bulo')

//All contributions by jaesung-cs:
//Copyright (c) 2024- jaesung-cs

#version 460 core

#extension GL_EXT_shader_16bit_storage : require

layout(local_size_x = 256) in;

layout(set = 1, binding = 0) uniform Info { uint point_count; };

layout(std430, set = 1, binding = 1) writeonly buffer GaussianPosition {
  float gaussian_position[];  // (N, 3)
};

layout(std430, set = 1, binding = 2) writeonly buffer GaussianCov3d {
  float gaussian_qscale[];  // (N, 7)
};

layout(std430, set = 1, binding = 3) writeonly buffer GaussianOpacity {
  float gaussian_opacity[];  // (N)
};

layout(std430, set = 1, binding = 4) writeonly buffer GaussianSh {
  float16_t gaussian_sh[];  // (N, 3, 4, 4), 16 values packed with 4 vec4.
};

layout(std430, set = 3, binding = 0) readonly buffer GaussianPly {
  uint offsets[60];  // pos(3), scale(3), rot(4), sh(48), opacity(1)
  float ply[];       // (N, M)
};

float sigmoid(float x) { return 1.f / (1.f + exp(-x)); }

shared uint local_offsets[60];

void main() {
  uint id = gl_GlobalInvocationID.x;

  // TODO: offsets in push constant?
  if (gl_LocalInvocationID.x < 60) {
    local_offsets[gl_LocalInvocationID.x] = offsets[gl_LocalInvocationID.x];
  }
  barrier();

  if (id < point_count) {
    // calculate covariance
    uint base = local_offsets[59];
    vec3 s =
        vec3(ply[base * id + local_offsets[3]], ply[base * id + local_offsets[4]], ply[base * id + local_offsets[5]]);
    s = exp(s);  // activation

    vec4 q = vec4(ply[base * id + local_offsets[6]], ply[base * id + local_offsets[7]],
                  ply[base * id + local_offsets[8]], ply[base * id + local_offsets[9]]);
    q = q / length(q);

    gaussian_qscale[7 * id + 0] = q[0];
    gaussian_qscale[7 * id + 1] = q[1];
    gaussian_qscale[7 * id + 2] = q[2];
    gaussian_qscale[7 * id + 3] = q[3];
    gaussian_qscale[7 * id + 4] = s[0];
    gaussian_qscale[7 * id + 5] = s[1];
    gaussian_qscale[7 * id + 6] = s[2];

    gaussian_position[3 * id + 0] = ply[base * id + local_offsets[0]];
    gaussian_position[3 * id + 1] = ply[base * id + local_offsets[1]];
    gaussian_position[3 * id + 2] = ply[base * id + local_offsets[2]];

#pragma unroll
    for (int i = 0; i < 48; ++i) {
      gaussian_sh[48 * id + i] = float16_t(ply[base * id + local_offsets[10 + i]]);
    }

    gaussian_opacity[id] = sigmoid(ply[base * id + local_offsets[58]]);
  }
}
