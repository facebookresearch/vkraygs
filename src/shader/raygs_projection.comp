//Copyright (c) Meta Platforms, Inc. and affiliates

#version 460 core

#extension GL_EXT_shader_16bit_storage : require

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform Camera {
  mat4 projection;
  mat4 view;
  vec3 camera_position;
  float pad0;
  uvec2 screen_size;  // (width, height)
};

layout(push_constant, std430) uniform PushConstants {
  mat4 model;
  float mip_bias;
  float log_p_min;
  bool mip_modulation;
};

layout(set = 1, binding = 0) uniform Info { uint point_count; };

layout(std430, set = 1, binding = 1) readonly buffer GaussianPosition {
  float gaussian_position[];  // (N, 3)
};

layout(std430, set = 1, binding = 2) readonly buffer GaussianCov3d {
  float gaussian_qscale[];  // (N, 7)
};

layout(std430, set = 1, binding = 3) readonly buffer GaussianOpacity {
  float gaussian_opacity[];  // (N)
};

layout(std430, set = 1, binding = 4) readonly buffer GaussianSh {
  f16vec4 gaussian_sh[];  // (N, 3, 4, 4), 16 values packed with 4 vec4.
};

layout(std430, set = 2, binding = 0) writeonly buffer DrawIndirect {
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  int vertexOffset;
  uint firstInstance;
  uint pad[3];

  // draw indirect
  uint vertexCount1;
  uint instanceCount1;
  uint firstVertex1;
  uint firstInstance1;
};

layout(std430, set = 2, binding = 1) writeonly buffer Instances {
  float instances[];  // (N, 14)
};

layout(std430, set = 2, binding = 2) buffer VisiblePointCount {
  uint visible_point_count;
};

layout(std430, set = 2, binding = 5) readonly buffer InverseMap {
  int inverse_map[];  // (N), inverse map from id to sorted index
};

void eigenvalueDecomposition(in vec3 cov, out vec2 v1, out vec2 v2, out float lambda1, out float lambda2){
    const float mid = 0.5f * (cov.x + cov.z);
    const float d = length(vec2(0.5f * (cov.x - cov.z), cov.y));

    lambda1 = mid + d;
    lambda2 = mid - d;

    // Compute one eigenvector using a stable formula
    const float deltaX = abs(cov.x - lambda1);
    const float deltaZ = abs(cov.z - lambda1);
    if (deltaX > deltaZ) {
        v1 = normalize(vec2(cov.y, lambda1 - cov.x));
    } else if(deltaX < deltaZ) {
        v1 = normalize(vec2(lambda1 - cov.z, cov.y));
    } else {
        v1 = vec2(1.f, 0.f);
    }

    v2 = vec2(-v1.y, v1.x);
}

void q_to_rot2x3(in vec4 q, out mat2x3 rot){

  float xx = q.x * q.x;
  float yy = q.y * q.y;
  float zz = q.z * q.z;
  float xy = q.x * q.y;
  float xz = q.x * q.z;
  float yz = q.y * q.z;
  float wx = q.w * q.x;
  float wy = q.w * q.y;
  float wz = q.w * q.z;

  rot[0][0] = 1.f - 2.f * (yy + zz);
  rot[0][1] = 2.f * (xy + wz);
  rot[0][2] = 2.f * (xz - wy);
  rot[1][0] = 2.f * (xy - wz);
  rot[1][1] = 1.f - 2.f * (xx + zz);
  rot[1][2] = 2.f * (yz + wx);

}

void compute_color(in mat3x4 sh[4], in vec3 dir, out vec3 color){
  // calculate spherical harmonics
  const float C0 = 0.28209479177387814f;
  const float C1 = 0.4886025119029199f;
  const float C20 = 1.0925484305920792f;
  const float C21 = 0.31539156525252005f;
  const float C22 = 0.5462742152960396f;
  const float C30 = 0.5900435899266435f;
  const float C31 = 2.890611442640554f;
  const float C32 = 0.4570457994644658f;
  const float C33 = 0.3731763325901154f;
  const float C34 = 1.445305721320277f;
  float x = dir.x;
  float y = dir.y;
  float z = dir.z;
  float xx = x * x;
  float yy = y * y;
  float zz = z * z;
  float xy = x * y;
  float yz = y * z;
  float xz = x * z;
  vec4 basis0 = vec4(C0, -C1 * y, C1 * z, -C1 * x);
  vec4 basis1 =
      vec4(C20 * xy, -C20 * yz, C21 * (2.f * zz - xx - yy), -C20 * xz);
  vec4 basis2 = vec4(C22 * (xx - yy), -C30 * y * (3.f * xx - yy), C31 * xy * z,
        -C32 * y * (4.f * zz - xx - yy));
  vec4 basis3 = vec4(C33 * z * (2.f * zz - 3.f * xx - 3.f * yy),
          -C32 * x * (4.f * zz - xx - yy), C34 * z * (xx - yy),
          -C30 * x * (xx - 3.f * yy));

  // row vector-matrix multiplication
  color = basis0 * sh[0] + basis1 * sh[1] + basis2 * sh[2] + basis3 * sh[3];

  // translation and clip
  color = max(color + 0.5f, 0.f);
}

void main() {
  uint id = gl_GlobalInvocationID.x;
  if (id >= point_count) return;

  if (id == 0) {
    indexCount = 6 * visible_point_count;
    instanceCount = 1;
    firstIndex = 0;
    vertexOffset = 0;
    firstInstance = 0;

    vertexCount1 = visible_point_count;
    instanceCount1 = 1;
    firstVertex1 = 0;
    firstInstance1 = 0;
  }

  int inverse_id = inverse_map[id];
  if (inverse_id == -1) return;

  float opacity = gaussian_opacity[id];

  vec4 q = vec4(gaussian_qscale[id * 7 + 0], gaussian_qscale[id * 7 + 1], gaussian_qscale[id * 7 + 2], gaussian_qscale[id * 7 + 3]);
  vec3 s = vec3(gaussian_qscale[id * 7 + 4], gaussian_qscale[id * 7 + 5], gaussian_qscale[id * 7 + 6]);

  mat3x4 sh[4]={
    mat3x4(gaussian_sh[id * 12 + 0], gaussian_sh[id * 12 + 4],
          gaussian_sh[id * 12 + 8]),
    mat3x4(gaussian_sh[id * 12 + 1], gaussian_sh[id * 12 + 5],
          gaussian_sh[id * 12 + 9]),
    mat3x4(gaussian_sh[id * 12 + 2], gaussian_sh[id * 12 + 6],
          gaussian_sh[id * 12 + 10]),
    mat3x4(gaussian_sh[id * 12 + 3], gaussian_sh[id * 12 + 7],
          gaussian_sh[id * 12 + 11]),
  };

  vec4 pos = vec4(gaussian_position[id * 3 + 0], gaussian_position[id * 3 + 1],
                  gaussian_position[id * 3 + 2], 1.f);

  // direction in model space for SH calculation
  vec4 camera_podel_position = inverse(model) * vec4(camera_position, 1.f);
  camera_podel_position = camera_podel_position / camera_podel_position.w;
  vec3 dir = normalize(pos.xyz - camera_podel_position.xyz);

  mat2x3 rot2x3;
  q_to_rot2x3(q,rot2x3);

  // model matrix
  mat3 model3d = mat3(model);
  rot2x3 = model3d * rot2x3;
  pos = model * pos;

  // view matrix
  mat3 view3d = mat3(view);
  rot2x3 = view3d * rot2x3;
  pos = view * pos;
  pos = pos / pos.w; // camera space

  mat3 rot = mat3(rot2x3[0], rot2x3[1], cross(rot2x3[0], rot2x3[1]));

  vec3 rmu=transpose(rot)*pos.xyz;

  vec2 f=abs(vec2(projection[0][0]*screen_size.x,projection[1][1]*screen_size.y)/2);
  vec3 sMIP = sqrt(s * s + mip_bias * dot(rmu, rmu)/(f.x * f.y));

  vec3 mu_hat = rmu/sMIP; //note this is unnormalized by now

  float c = length(mu_hat); // this is c from the paper

  // MIP modulation
  if(mip_bias>0 && mip_modulation){
    opacity *= length(rmu*vec3(s.y*s.z,s.x*s.z,s.y*s.x))/(sMIP.x*sMIP.y*sMIP.z*c);
  }


  mu_hat /= c; // Normalizing mu_hat


  // Computing T
  mat2x3 Q;
  vec3 tmp = mu_hat;
  float v_sign = mu_hat.z>0?1.0f:-1.0f;

  tmp.z += v_sign;

  float den = dot(tmp, tmp) * 0.5f;
  Q[0] = tmp * (tmp.x / den);
  Q[0].x -= 1.0f;
  Q[0] *= sMIP * v_sign;
  Q[1] = tmp * (tmp.y / den);
  Q[1].y -= 1.0f;
  Q[1] *= sMIP;
  Q = rot * Q;

  // We compute cov2d as the elements of the upper triangular part of tranpose(Q)*Q
  vec3 QQ = vec3(dot(Q[0], Q[0]), dot(Q[0], Q[1]), dot(Q[1], Q[1]));

  float lambda1, lambda2;
  mat2 U;
  eigenvalueDecomposition(QQ, U[0], U[1], lambda1, lambda2);

  Q = Q * U;
  mat3 T = mat3(Q[0],Q[1],pos.xyz);

  vec3 color;
  compute_color(sh, dir, color);

  instances[inverse_id * 14 + 0] = T[0][0];
  instances[inverse_id * 14 + 1] = T[0][1];
  instances[inverse_id * 14 + 2] = T[0][2];
  instances[inverse_id * 14 + 3] = T[1][0];
  instances[inverse_id * 14 + 4] = T[1][1];
  instances[inverse_id * 14 + 5] = T[1][2];
  instances[inverse_id * 14 + 6] = T[2][0];
  instances[inverse_id * 14 + 7] = T[2][1];
  instances[inverse_id * 14 + 8] = T[2][2];
  instances[inverse_id * 14 + 9] = c*c;
  instances[inverse_id * 14 + 10] = color.r;
  instances[inverse_id * 14 + 11] = color.g;
  instances[inverse_id * 14 + 12] = color.b;
  instances[inverse_id * 14 + 13] = opacity;
}
